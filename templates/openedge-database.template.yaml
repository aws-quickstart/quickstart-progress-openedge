AWSTemplateFormatVersion: 2010-09-09
Description: >-
  OpenEdge Database infrastructure with Replication Set
Parameters:
  DBDeployPackage:
    Description: URL to package to deploy databases into database EC2 instances
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  EmailAddress:
    Description: Email Address for notification
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email id.
  KeyPairName:
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Name of an existing EC2 KeyPair.
  WebserverCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for  webserver access
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access
    Type: String
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: implementing/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  PrivateSubnet1ID:
    Description: Private Subnet Id 1
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Description: Private Subnet Id 2
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet1ID:
    Description: Public Subnet Id 1
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet2ID:
    Description: Public Subnet Id 2
    Type: "AWS::EC2::Subnet::Id"
  VPCID:
    Description: "ID of the VPC (e.g., vpc-0343606e)"
    Type: "AWS::EC2::VPC::Id"
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Description: The CIDR IP range of VPC
    Type: String
  PortNumber:
    Description: Port number to use to connect to the database broker process
    Type: Number
  MinPort:
    Description: Use Minimum Dynamic Server (-minport) number to specify the lowest port number in a specified range of port numbers accessible to a client.
    Type: Number
    Default: 1025
  MaxPort:
    Description: Use Maximum Dynamic Server (-minport) number to specify the highest port number in a specified range of port numbers accessible to a client.
    Type: Number
    Default: 2000
Mappings:
  AWSAMIRegionMap:
    AMI:
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405
    ap-northeast-1:
      US1604HVM: ami-60a4b21c
    ap-northeast-2:
      US1604HVM: ami-633d920d
    ap-south-1:
      US1604HVM: ami-dba580b4
    ap-southeast-1:
      US1604HVM: ami-82c9ecfe
    ap-southeast-2:
      US1604HVM: ami-2b12dc49
    ca-central-1:
      US1604HVM: ami-9d7afcf9
    eu-central-1:
      US1604HVM: ami-cd491726
    eu-west-1:
      US1604HVM: ami-74e6b80d
    eu-west-2:
      US1604HVM: ami-506e8f37
    sa-east-1:
      US1604HVM: ami-5782d43b
    us-east-1:
      US1604HVM: ami-6dfe5010
    us-east-2:
      US1604HVM: ami-e82a1a8d
    us-west-1:
      US1604HVM: ami-493f2f29
    us-west-2:
      US1604HVM: ami-ca89eeb2
Conditions:
  GovCloudCondition: !Equals
    - !Ref "AWS::Region"
    - us-gov-west-1
Resources:
  NotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
  SourceReplica:
    Type: "AWS::EC2::Instance"
    # Metadata:
    #   "AWS::CloudFormation::Init":
    #     config:
    #       files:
    #         "/install/app.tar.gz":
    #           source: https://mypublicfiles1.s3.amazonaws.com/app.tar.gz
    #           mode: '000755'
    #           owner: ec2-user
    #           group: ec2-user
    #      'AWS::CloudFormation::Authentication':
    #        S3AccessCreds:
    #          type: S3
    #          accessKeyId: !Ref AccessKey
    #          secretKey: !Ref SecretAccessKey
    Properties:
      ImageId: ami-0e5870d5eb42220d8
      InstanceType: t3.micro
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: db0
      KeyName: !Ref KeyPairName
      UserData: !Base64 
        'Fn::Sub':
          - >
            #!/bin/bash -x

            # Setup Databases

            mkdir -p /install

            wget -O /install/app.tar.gz ${DBDeployPackage}

            OE_ENV=db0

            export OE_ENV

            tar xCf /install /install/app.tar.gz

            /install/app/deploy.sh

          - DBDeployPackage: !Ref DBDeployPackage
  TargetReplicaOne:
    Type: "AWS::EC2::Instance"
    # Metadata:
    #   "AWS::CloudFormation::Init":
    #     config:
    #       files:
    #         "/install/app.tar.gz":
    #           source: https://mypublicfiles1.s3.amazonaws.com/app.tar.gz
    #           mode: '000755'
    #           owner: ec2-user
    #           group: ec2-user
    #      'AWS::CloudFormation::Authentication':
    #        S3AccessCreds:
    #          type: S3
    #          accessKeyId: !Ref AccessKey
    #          secretKey: !Ref SecretAccessKey
    Properties:
      ImageId: ami-0e5870d5eb42220d8
      InstanceType: t3.micro
      SubnetId: !Ref PrivateSubnet2ID
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: db1
      KeyName: !Ref KeyPairName
      UserData: !Base64 
        'Fn::Sub':
          - >
            #!/bin/bash -x

            # Setup Databases

            mkdir -p /install

            wget -O /install/app.tar.gz ${DBDeployPackage}

            OE_ENV=db1

            export OE_ENV

            tar xCf /install /install/app.tar.gz

            /install/app/deploy.sh

          - DBDeployPackage: !Ref DBDeployPackage      
  TargetReplicaTwo:
    Type: "AWS::EC2::Instance"
    # Metadata:
    #   "AWS::CloudFormation::Init":
    #     config:
    #       files:
    #         "/install/app.tar.gz":
    #           source: https://mypublicfiles1.s3.amazonaws.com/app.tar.gz
    #           mode: '000755'
    #           owner: ec2-user
    #           group: ec2-user
    #      'AWS::CloudFormation::Authentication':
    #        S3AccessCreds:
    #          type: S3
    #          accessKeyId: !Ref AccessKey
    #          secretKey: !Ref SecretAccessKey
    Properties:
      ImageId: ami-0e5870d5eb42220d8
      InstanceType: t3.micro
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: db2
      KeyName: !Ref KeyPairName
      UserData: !Base64 
        'Fn::Sub':
          - >
            #!/bin/bash -x

            # Setup Databases

            mkdir -p /install

            wget -O /install/app.tar.gz ${DBDeployPackage}

            OE_ENV=db2

            export OE_ENV

            tar xCf /install /install/app.tar.gz

            /install/app/deploy.sh

          - DBDeployPackage: !Ref DBDeployPackage      
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Database Instance (SSH, DB)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: !Ref MinPort
          ToPort: !Ref MaxPort
          CidrIp:
            Ref: RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: !Ref PortNumber
          ToPort: !Ref PortNumber
          CidrIp:
            Ref: RemoteAccessCIDR
      VpcId: !Ref VPCID
Outputs:
  DBHostName:
    Description: Private IP Address of db0 instance
    Value:
      Fn::GetAtt:
      - SourceReplica
      - PrivateIp
  DBHostName1:
    Description: Private IP Address of db0 instance
    Value:
      Fn::GetAtt:
      - TargetReplicaOne
      - PrivateIp
  DBHostName2:
    Description: Private IP Address of db0 instance
    Value:
      Fn::GetAtt:
      - TargetReplicaTwo
      - PrivateIp
